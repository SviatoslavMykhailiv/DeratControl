// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(DeratControlDbContext))]
    partial class DeratControlDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.CompletedErrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("CompletedErrandID");

                    b.Property<DateTime>("CompleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<bool>("OnDemand")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Report")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("ProviderId");

                    b.ToTable("CompletedErrand", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CompletedPointReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ErrandId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PerimeterId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PointId")
                        .HasColumnType("char(36)");

                    b.Property<int>("PointOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("SupplementId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TrapId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ErrandId");

                    b.HasIndex("PerimeterId");

                    b.HasIndex("SupplementId");

                    b.HasIndex("TrapId");

                    b.ToTable("CompletedPointReviews");
                });

            modelBuilder.Entity("Domain.Entities.DefaultFacility", b =>
                {
                    b.Property<Guid>("FacilityId")
                        .HasColumnType("char(36)")
                        .HasColumnName("FacilityFID");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("UserFID");

                    b.HasKey("FacilityId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("DefaultFacility", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Errand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ErrandID");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("EmployeeFID");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("char(36)")
                        .HasColumnName("FacilityFID");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<bool>("OnDemand")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("OriginalDueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ProviderFID");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Errand", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Facility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("FacilityID");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ProviderFID");

                    b.Property<Guid?>("ProviderId1")
                        .HasColumnType("char(36)");

                    b.Property<string>("SecurityCode")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId1");

                    b.ToTable("Facility", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("FieldID");

                    b.Property<bool>("AdminEditable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FieldName")
                        .HasColumnType("longtext");

                    b.Property<byte?>("FieldType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("OptionList")
                        .HasColumnType("longtext");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("PercentStep")
                        .HasColumnType("int");

                    b.Property<Guid>("TrapId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TrapFID");

                    b.HasKey("Id");

                    b.HasIndex("TrapId");

                    b.ToTable("Field", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Perimeter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("PerimeterID");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("char(36)")
                        .HasColumnName("FacilityFID");

                    b.Property<int>("LeftLoc")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("PerimeterName")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Scale")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("SchemeImagePath")
                        .HasColumnType("longtext");

                    b.Property<int>("TopLoc")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.ToTable("Perimeter", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Point", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("PointID");

                    b.Property<int>("LeftLoc")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("PerimeterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("PerimeterFID");

                    b.Property<Guid>("SupplementId")
                        .HasColumnType("char(36)")
                        .HasColumnName("SupplementFID");

                    b.Property<int>("TopLoc")
                        .HasColumnType("int");

                    b.Property<Guid>("TrapId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TrapFID");

                    b.HasKey("Id");

                    b.HasIndex("PerimeterId");

                    b.HasIndex("SupplementId");

                    b.HasIndex("TrapId");

                    b.ToTable("Point", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PointFieldValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("PointFieldValueID");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("char(36)")
                        .HasColumnName("FieldFID");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PointId")
                        .HasColumnType("char(36)")
                        .HasColumnName("PointFID");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("PointId");

                    b.ToTable("PointFieldValue", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PointReview", b =>
                {
                    b.Property<Guid>("ErrandId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ErrandFID");

                    b.Property<Guid>("PointId")
                        .HasColumnType("char(36)")
                        .HasColumnName("PointFID");

                    b.HasKey("ErrandId", "PointId");

                    b.HasIndex("PointId");

                    b.ToTable("PointReview", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PointReviewRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("PointReviewRecordID");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("char(36)")
                        .HasColumnName("FieldFID");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PointReviewId")
                        .HasColumnType("char(36)")
                        .HasColumnName("PointReviewFID");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("PointReviewId");

                    b.ToTable("PointReviewRecord", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Supplement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("SupplementID");

                    b.Property<string>("CertificateFilePath")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ProviderFID");

                    b.Property<string>("SupplementName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Supplement", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Trap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("TrapID");

                    b.Property<string>("Color")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ProviderFID");

                    b.Property<string>("TrapName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Trap", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Available")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("FacilityId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ProviderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ProviderFID");

                    b.Property<string>("ProviderName")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("ProviderId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CompletedErrand", b =>
                {
                    b.HasOne("Infrastructure.Identity.ApplicationUser", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Identity.ApplicationUser", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Facility");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Domain.Entities.CompletedPointReview", b =>
                {
                    b.HasOne("Domain.Entities.CompletedErrand", "Errand")
                        .WithMany("PointReviewHistory")
                        .HasForeignKey("ErrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Perimeter", "Perimeter")
                        .WithMany()
                        .HasForeignKey("PerimeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Supplement", "Supplement")
                        .WithMany()
                        .HasForeignKey("SupplementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Trap", "Trap")
                        .WithMany()
                        .HasForeignKey("TrapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Errand");

                    b.Navigation("Perimeter");

                    b.Navigation("Supplement");

                    b.Navigation("Trap");
                });

            modelBuilder.Entity("Domain.Entities.DefaultFacility", b =>
                {
                    b.HasOne("Domain.Entities.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Identity.ApplicationUser", "User")
                        .WithMany("DefaultFacilities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Errand", b =>
                {
                    b.HasOne("Infrastructure.Identity.ApplicationUser", "Employee")
                        .WithMany("Errands")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Identity.ApplicationUser", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Facility");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Domain.Entities.Facility", b =>
                {
                    b.HasOne("Infrastructure.Identity.ApplicationUser", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId1");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Domain.Entities.Field", b =>
                {
                    b.HasOne("Domain.Entities.Trap", "Trap")
                        .WithMany("Fields")
                        .HasForeignKey("TrapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trap");
                });

            modelBuilder.Entity("Domain.Entities.Perimeter", b =>
                {
                    b.HasOne("Domain.Entities.Facility", "Facility")
                        .WithMany("Perimeters")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("Domain.Entities.Point", b =>
                {
                    b.HasOne("Domain.Entities.Perimeter", "Perimeter")
                        .WithMany("Points")
                        .HasForeignKey("PerimeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Supplement", "Supplement")
                        .WithMany()
                        .HasForeignKey("SupplementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Trap", "Trap")
                        .WithMany()
                        .HasForeignKey("TrapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Perimeter");

                    b.Navigation("Supplement");

                    b.Navigation("Trap");
                });

            modelBuilder.Entity("Domain.Entities.PointFieldValue", b =>
                {
                    b.HasOne("Domain.Entities.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Point", "Point")
                        .WithMany("Values")
                        .HasForeignKey("PointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Point");
                });

            modelBuilder.Entity("Domain.Entities.PointReview", b =>
                {
                    b.HasOne("Domain.Entities.Errand", "Errand")
                        .WithMany("Points")
                        .HasForeignKey("ErrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Point", "Point")
                        .WithMany("Reviews")
                        .HasForeignKey("PointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Errand");

                    b.Navigation("Point");
                });

            modelBuilder.Entity("Domain.Entities.PointReviewRecord", b =>
                {
                    b.HasOne("Domain.Entities.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.CompletedPointReview", "PointReview")
                        .WithMany("Records")
                        .HasForeignKey("PointReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("PointReview");
                });

            modelBuilder.Entity("Domain.Entities.Supplement", b =>
                {
                    b.HasOne("Infrastructure.Identity.ApplicationUser", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Domain.Entities.Trap", b =>
                {
                    b.HasOne("Infrastructure.Identity.ApplicationUser", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.HasOne("Domain.Entities.Facility", "Facility")
                        .WithMany("Users")
                        .HasForeignKey("FacilityId");

                    b.HasOne("Infrastructure.Identity.ApplicationUser", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId");

                    b.OwnsOne("Domain.ValueObjects.Device", "Device", b1 =>
                        {
                            b1.Property<Guid>("ApplicationUserId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("DeviceIdentifier")
                                .HasColumnType("longtext")
                                .HasColumnName("DeviceIdentifier");

                            b1.Property<int>("DeviceType")
                                .HasColumnType("int")
                                .HasColumnName("DeviceType");

                            b1.HasKey("ApplicationUserId");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("Device");

                    b.Navigation("Facility");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Infrastructure.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Infrastructure.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.CompletedErrand", b =>
                {
                    b.Navigation("PointReviewHistory");
                });

            modelBuilder.Entity("Domain.Entities.CompletedPointReview", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("Domain.Entities.Errand", b =>
                {
                    b.Navigation("Points");
                });

            modelBuilder.Entity("Domain.Entities.Facility", b =>
                {
                    b.Navigation("Perimeters");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Perimeter", b =>
                {
                    b.Navigation("Points");
                });

            modelBuilder.Entity("Domain.Entities.Point", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("Domain.Entities.Trap", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Navigation("DefaultFacilities");

                    b.Navigation("Errands");
                });
#pragma warning restore 612, 618
        }
    }
}
